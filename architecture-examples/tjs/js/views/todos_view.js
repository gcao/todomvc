// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  this.TodosView = (function() {
    function TodosView(todos) {
      this.todos = todos;
    }

    TodosView.prototype.filterBy = function(filter) {
      if (['all', 'active', 'completed'].indexOf(filter) < 0) {
        console.log("Filter is not supported: '" + filter + "'");
        return;
      }
      this.filter = filter;
      this.el.find('#filters a').removeClass('selected');
      this.el.find("li." + this.filter + " a").addClass('selected');
      return this.updateUI();
    };

    TodosView.prototype.updateUI = function() {
      this.updateChildren();
      return this.updateFooter();
    };

    TodosView.prototype.updateChildren = function() {
      return T(this.childrenView()).render({
        inside: this.el.find('#todo-list')
      });
    };

    TodosView.prototype.updateFooter = function() {
      this.el.find('#footer').toggle(this.todos.length > 0);
      this.updateRemaining();
      return this.updateCompleted();
    };

    TodosView.prototype.childrenView = function() {
      var todo, _i, _len, _ref, _results;
      _ref = this.todos;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        todo = _ref[_i];
        if ((this.filter === 'active' && todo.completed) || (this.filter === 'completed' && !todo.completed)) {
          continue;
        }
        _results.push(new TodoView(this.todos, todo).process());
      }
      return _results;
    };

    TodosView.prototype.updateRemaining = function() {
      return T(this.remainingView()).render({
        replace: this.el.find('#todo-count')
      });
    };

    TodosView.prototype.remainingView = function() {
      return ['span#todo-count', ['strong', this.todos.remaining()], " item" + (this.todos.remaining() > 1 ? 's' : '') + " left"];
    };

    TodosView.prototype.updateCompleted = function() {
      this.el.find('#clear-completed').toggle(this.todos.completed() > 0);
      return T(this.completedView()).render({
        inside: this.el.find('#clear-completed span')
      });
    };

    TodosView.prototype.completedView = function() {
      return ['span', 'Clear completed ', this.todos.completed()];
    };

    TodosView.prototype.process = function() {
      var self;
      self = this;
      return [
        'header#header', {
          afterRender: function(el) {
            return self.el = $(el);
          }
        }, ['h1', 'todos'], [
          'input#new-todo', {
            type: 'text',
            placeholder: 'What needs to be done?',
            autofocus: 'autofocus',
            keyup: function(e) {
              var el;
              el = $(this);
              if (e.which === ENTER_KEY && el.val().trim()) {
                self.todos.push(new Todo(el.val().trim()));
                return el.val('');
              }
            }
          }
        ], [
          'section#main', [
            'input#toggle-all', {
              type: 'checkbox',
              click: function() {
                return self.todos.toggleAllCompleted($(this).is(':checked'));
              }
            }
          ], [
            'label', {
              "for": 'toggle-all'
            }, 'Mark all as complete'
          ], ['ul#todo-list', this.childrenView()]
        ], [
          'footer#footer', this.remainingView(), [
            'ul#filters', [
              'li.all', [
                'a', {
                  href: '#/'
                }, 'All'
              ]
            ], [
              'li.active', [
                'a', {
                  href: '#/active'
                }, 'Active'
              ]
            ], [
              'li.completed', [
                'a', {
                  href: '#/completed'
                }, 'Completed'
              ]
            ]
          ], [
            'button#clear-completed', {
              click: function() {
                return self.todos.clearCompleted();
              }
            }, this.completedView()
          ]
        ]
      ];
    };

    TodosView.prototype.render = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = T(this.process())).render.apply(_ref, args);
    };

    return TodosView;

  })();

}).call(this);
