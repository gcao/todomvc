// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  this.Todos = function() {
    var arg, args, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      this.push(arg);
    }
  };

  Todos.prototype = new Array;

  Todos.prototype.watchIgnore = ['el'];

  Todos.prototype.serialize = function() {
    var data, item, _i, _len;
    data = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      item = this[_i];
      data.push({
        title: item.title,
        completed: item.completed
      });
    }
    return JSON.stringify(data);
  };

  Todos.deserialize = function(str) {
    var data, item, result, _i, _len;
    result = new Todos;
    if (str) {
      if (data = JSON.parse(str)) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          result.push(new Todo(result, item.title, item.completed));
        }
      }
    }
    return result;
  };

  Todos.load = function(id) {
    var todos;
    todos = this.deserialize(localStorage.getItem(id));
    todos.id = id;
    return todos;
  };

  Todos.prototype.save = function() {
    return localStorage.setItem(this.id, this.serialize());
  };

  Todos.prototype.remaining = function() {
    return this.filter(function(item) {
      return !item.completed;
    }).length;
  };

  Todos.prototype.completed = function() {
    return this.filter(function(item) {
      return item.completed;
    }).length;
  };

  Todos.prototype.toggleAllCompleted = function(completed) {
    var child, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      child = this[_i];
      _results.push(child.completed = completed);
    }
    return _results;
  };

  Todos.prototype.clearCompleted = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = _ref = this.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
      if (this[i].completed) {
        _results.push(this.splice(i, 1));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Todos.prototype.filterBy = function(_filterBy) {
    this._filterBy = _filterBy;
    return T(this.renderChildren()).render({
      inside: '#todo-list'
    });
  };

  Todos.prototype.renderChildren = function() {
    var todo, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      todo = this[_i];
      if (this._filterBy === 'active' && todo.completed) {
        continue;
      } else if (this._filterBy === 'completed' && !todo.completed) {
        continue;
      } else {
        _results.push(todo.render());
      }
    }
    return _results;
  };

  Todos.prototype.updateUI = function() {
    if (this.el) {
      this.updateChildren();
      this.updateRemaining();
      return this.updateCompleted();
    }
  };

  Todos.prototype.updateChildren = function() {
    return T(this.renderChildren()).render({
      inside: this.el.find('#todo-list')
    });
  };

  Todos.prototype.updateRemaining = function() {
    return T(this.renderRemaining()).render({
      replace: this.el.find('#todo-count')
    });
  };

  Todos.prototype.renderRemaining = function() {
    return ['span#todo-count', ['strong', this.remaining()], " item" + (this.remaining() > 1 ? 's' : '') + " left"];
  };

  Todos.prototype.updateCompleted = function() {
    return this.el.find('#clear-completed span').text(this.completed());
  };

  Todos.prototype.render = function() {
    var self;
    self = this;
    return [
      'header#header', {
        afterRender: function(el) {
          return self.el = $(el);
        }
      }, ['h1', 'todos'], [
        'input#new-todo', {
          type: 'text',
          placeholder: 'What needs to be done?',
          autofocus: 'autofocus',
          keyup: function(e) {
            var el;
            el = $(this);
            if (e.which === ENTER_KEY && el.val().trim()) {
              self.push(new Todo(self, el.val().trim()));
              return el.val('');
            }
          }
        }
      ], [
        'section#main', [
          'input#toggle-all', {
            type: 'checkbox',
            click: function() {
              return self.toggleAllCompleted($(this).is(':checked'));
            }
          }
        ], [
          'label', {
            "for": 'toggle-all'
          }, 'Mark all as complete'
        ], ['ul#todo-list', this.renderChildren()]
      ], [
        'footer#footer', this.renderRemaining(), [
          'ul#filters', [
            'li', [
              'a', {
                href: '#/'
              }, 'All'
            ], [
              'a', {
                href: '#/active'
              }, 'Active'
            ], [
              'a', {
                href: '#/completed'
              }, 'Completed'
            ]
          ]
        ], [
          'button#clear-completed', {
            click: function() {
              return self.clearCompleted();
            }
          }, 'Clear completed ', ['span', this.length > 0 ? this.length : '']
        ]
      ]
    ];
  };

}).call(this);
