// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Widget = (function() {
    function Widget() {
      var children, data;
      data = arguments[0], children = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.data = data;
      this.children = children;
      this.update = __bind(this.update, this);
      this.isWidget = true;
      this.initialize();
    }

    Widget.prototype.initialize = function() {};

    Widget.prototype.process = function() {
      var callback, result, self;
      self = this;
      result = this.template();
      callback = function(el) {
        return self.el = el;
      };
      if (result[1] && typeof result[1] === "object" && (!(result[1] instanceof Array))) {
        if (result[1].afterRender) {
          result[1].afterRender.unshift(callback);
        } else {
          result[1].afterRender = callback;
        }
      } else {
        result.splice(1, 0, {
          afterRender: callback
        });
      }
      return T(result);
    };

    Widget.prototype.update = function() {
      return this.process().render({
        replace: this.el
      });
    };

    Widget.create = function(props) {
      var Child, k, v;
      Child = (function(_super) {
        __extends(Child, _super);

        function Child() {
          return Child.__super__.constructor.apply(this, arguments);
        }

        return Child;

      })(this);
      for (k in props) {
        v = props[k];
        Child.prototype[k] = v;
      }
      return function() {
        var children, data;
        data = arguments[0], children = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Child, [data].concat(__slice.call(children)), function(){}).process();
      };
    };

    Widget.inline = function(data, widgetProps) {
      return this.create(widgetProps)(data);
    };

    return Widget;

  })();

}).call(this);
