// Generated by CoffeeScript 1.7.1
(function() {
  var FooterFilterLink, TodosChildrenView, TodosFooterView,
    __slice = [].slice;

  this.TodosView = (function() {
    function TodosView(todos, filter) {
      this.todos = todos;
      this.filter = filter;
      console.log('TodosView.constructor');
    }

    TodosView.prototype.process = function() {
      var self;
      self = this;
      return [
        'header#header', ['h1', 'todos'], [
          'input#new-todo', {
            type: 'text',
            placeholder: 'What needs to be done?',
            autofocus: 'autofocus',
            keyup: function(e) {
              var el;
              el = $(this);
              if (e.which === ENTER_KEY && el.val().trim()) {
                self.todos.push(new Todo(self.todos, el.val().trim()));
                return el.val('');
              }
            }
          }
        ], [
          'section#main', [
            'input#toggle-all', {
              type: 'checkbox',
              click: function() {
                return self.todos.toggleAllCompleted($(this).is(':checked'));
              }
            }
          ], [
            'label', {
              "for": 'toggle-all'
            }, 'Mark all as complete'
          ], new TodosChildrenView(this.todos, this.filter).process()
        ], new TodosFooterView(this.todos, this.filter).process()
      ];
    };

    TodosView.prototype.render = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = T(this.process())).render.apply(_ref, args);
    };

    return TodosView;

  })();

  TodosChildrenView = (function() {
    function TodosChildrenView(todos, filter) {
      this.todos = todos;
      this.filter = filter;
      this.todos.subscribe(CHANGED, (function(_this) {
        return function() {
          return T(_this.process()).render({
            replace: _this.el
          });
        };
      })(this));
      Busbup.subscribe(FILTER, (function(_this) {
        return function(_, filter) {
          _this.filter = filter;
          return T(_this.process()).render({
            replace: _this.el
          });
        };
      })(this));
    }

    TodosChildrenView.prototype.process = function() {
      var self, todo;
      self = this;
      return [
        'ul#todo-list', {
          afterRender: function(el) {
            return self.el = $(el);
          }
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = this.todos.children();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            todo = _ref[_i];
            if ((this.filter === 'active' && todo.completed) || (this.filter === 'completed' && !todo.completed)) {
              continue;
            }
            _results.push(new TodoView(this.todos, todo).process());
          }
          return _results;
        }).call(this)
      ];
    };

    return TodosChildrenView;

  })();

  TodosFooterView = (function() {
    function TodosFooterView(todos, filter) {
      this.todos = todos;
      this.filter = filter;
      this.todos.subscribe(CHANGED, (function(_this) {
        return function() {
          return T(_this.process()).render({
            replace: _this.el
          });
        };
      })(this));
      Busbup.subscribe(FILTER, (function(_this) {
        return function(_, filter) {
          return _this.filter = filter;
        };
      })(this));
    }

    TodosFooterView.prototype.filters = function() {
      return [
        {
          name: 'all',
          label: 'All',
          selected: this.filter === 'all'
        }, {
          name: 'active',
          label: 'Active',
          selected: this.filter === 'active'
        }, {
          name: 'completed',
          label: 'Completed',
          selected: this.filter === 'completed'
        }
      ];
    };

    TodosFooterView.prototype.process = function() {
      var filter, self;
      self = this;
      return [
        'footer#footer', {
          afterRender: function(el) {
            return self.el = $(el);
          }
        }, this.todos.length() === 0 ? {
          style: {
            display: 'none'
          }
        } : void 0, [
          'span#todo-count', ['strong', this.todos.remaining()], " item", [
            'span.plural', this.todos.remaining() <= 1 ? {
              style: {
                display: 'none'
              }
            } : void 0, 's'
          ], " left"
        ], [
          'ul#filters', (function() {
            var _i, _len, _ref, _results;
            _ref = this.filters();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              filter = _ref[_i];
              _results.push(new FooterFilterLink(filter).process());
            }
            return _results;
          }).call(this)
        ], [
          'button#clear-completed', this.todos.completed() === 0 ? {
            style: {
              display: 'none'
            }
          } : void 0, {
            click: function() {
              return self.todos.clearCompleted();
            }
          }, ['span', 'Clear completed (', ['span.completed-value', this.todos.completed()], ')']
        ]
      ];
    };

    return TodosFooterView;

  })();

  FooterFilterLink = (function() {
    function FooterFilterLink(filter) {
      this.filter = filter;
      Busbup.subscribe(FILTER, (function(_this) {
        return function(_, filter) {
          _this.filter.selected = filter === _this.filter.name;
          return T(_this.process()).render({
            replace: _this.el
          });
        };
      })(this));
    }

    FooterFilterLink.prototype.process = function() {
      var self;
      self = this;
      return [
        'li', {
          afterRender: function(el) {
            return self.el = $(el);
          },
          "class": this.filter.name
        }, [
          'a', this.filter.selected ? {
            "class": 'selected'
          } : void 0, {
            href: "#/" + this.filter.name
          }, this.filter.label
        ]
      ];
    };

    return FooterFilterLink;

  })();

}).call(this);
