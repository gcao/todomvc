// Generated by CoffeeScript 1.7.1
(function() {
  var TodoView, TodosChildrenView, TodosFooterView;

  this.TodosView2 = Widget.create({
    template: function() {
      var self;
      self = this;
      return [
        'header#header', ['h1', 'todos'], [
          'input#new-todo', {
            type: 'text',
            placeholder: 'What needs to be done?',
            autofocus: 'autofocus',
            keyup: function(e) {
              var el;
              el = $(this);
              if (e.which === ENTER_KEY && el.val().trim()) {
                self.data.todos.push(new Todo(self.data.todos, el.val().trim()));
                return el.val('');
              }
            }
          }
        ], [
          'section#main', [
            'input#toggle-all', {
              type: 'checkbox',
              click: function() {
                return self.data.todos.toggleAllCompleted($(this).is(':checked'));
              }
            }
          ], [
            'label', {
              "for": 'toggle-all'
            }, 'Mark all as complete'
          ], TodosChildrenView({
            todos: this.data.todos,
            filter: this.data.filter
          })
        ], TodosFooterView({
          todos: this.data.todos,
          filter: this.data.filter
        })
      ];
    }
  });

  TodosChildrenView = Widget.create({
    initialize: function() {
      this.data.todos.subscribe(CHANGED, this.update);
      return Busbup.subscribe(FILTER, (function(_this) {
        return function(_, filter) {
          _this.data.filter = filter;
          return _this.update();
        };
      })(this));
    },
    template: function() {
      var todo;
      return [
        'ul#todo-list', (function() {
          var _i, _len, _ref, _results;
          _ref = this.data.todos.children();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            todo = _ref[_i];
            if ((this.data.filter === 'active' && todo.completed) || (this.data.filter === 'completed' && !todo.completed)) {
              continue;
            }
            _results.push(TodoView({
              todos: this.data.todos,
              todo: todo
            }));
          }
          return _results;
        }).call(this)
      ];
    }
  });

  TodoView = Widget.create({
    initialize: function() {
      return this.data.todo.subscribe(CHANGED, this.update);
    },
    close: function() {
      var trimmedValue;
      if (!this.el.hasClass('editing')) {
        return;
      }
      this.el.removeClass('editing');
      if (trimmedValue = this.input.val().trim()) {
        return this.data.todo.title = trimmedValue;
      }
    },
    template: function() {
      var self;
      self = this;
      return [
        'li', this.data.todo.completed ? {
          "class": 'completed'
        } : void 0, [
          '.view', {
            dblclick: function() {
              self.el.addClass('editing');
              return self.input.focus();
            }
          }, [
            "input.toggle", {
              type: 'checkbox',
              checked: (this.data.todo.completed ? 'checked' : void 0),
              click: function() {
                return self.data.todo.completed = !self.data.todo.completed;
              }
            }
          ], ['label', this.data.todo.title], [
            'button.destroy', {
              click: function() {
                return self.data.todos.splice(self.data.todos.indexOf(self.data.todo), 1);
              }
            }
          ]
        ], [
          'input.edit', {
            afterRender: function(el) {
              return self.input = $(el);
            },
            type: 'text',
            keypress: function(e) {
              if (e.which === ENTER_KEY) {
                return self.close();
              }
            },
            keydown: function(e) {
              if (e.which === ESC_KEY) {
                $(this).val(self.data.todo.title);
                return self.el.removeClass('editing');
              }
            },
            blur: function() {
              return self.close();
            }
          }
        ]
      ];
    }
  });

  TodosFooterView = Widget.create({
    initialize: function() {
      this.data.todos.subscribe(CHANGED, this.update);
      return Busbup.subscribe(FILTER, (function(_this) {
        return function(_, filter) {
          return _this.data.filter = filter;
        };
      })(this));
    },
    filters: function() {
      return [
        {
          name: 'all',
          label: 'All',
          selected: this.data.filter === 'all'
        }, {
          name: 'active',
          label: 'Active',
          selected: this.data.filter === 'active'
        }, {
          name: 'completed',
          label: 'Completed',
          selected: this.data.filter === 'completed'
        }
      ];
    },
    template: function() {
      var filter, self;
      self = this;
      return [
        'footer#footer', this.data.todos.length() === 0 ? {
          style: {
            display: 'none'
          }
        } : void 0, [
          'span#todo-count', ['strong', this.data.todos.remaining()], " item", [
            'span.plural', this.data.todos.remaining() <= 1 ? {
              style: {
                display: 'none'
              }
            } : void 0, 's'
          ], " left"
        ], [
          'ul#filters', (function() {
            var _i, _len, _ref, _results;
            _ref = this.filters();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              filter = _ref[_i];
              _results.push(Widget.inline(filter, {
                initialize: function() {
                  return Busbup.subscribe(FILTER, (function(_this) {
                    return function(_, filter) {
                      _this.data.selected = filter === _this.data.name;
                      return _this.update();
                    };
                  })(this));
                },
                template: function() {
                  return [
                    "li." + this.data.name, [
                      "a", this.data.selected ? {
                        "class": 'selected'
                      } : void 0, {
                        href: "#/" + this.data.name
                      }, this.data.label
                    ]
                  ];
                }
              }));
            }
            return _results;
          }).call(this)
        ], [
          'button#clear-completed', this.data.todos.completed() === 0 ? {
            style: {
              display: 'none'
            }
          } : void 0, {
            click: function() {
              return self.data.todos.clearCompleted();
            }
          }, ['span', 'Clear completed (', ['span.completed-value', this.data.todos.completed()], ')']
        ]
      ];
    }
  });

}).call(this);
