// Generated by CoffeeScript 1.7.1
(function() {
  var FreeMartInternal, FuzzyRegistry, HashRegistry, InUse, NOT_FOUND, NOT_FOUND_FINAL, NO_PROVIDER, Provider, Registry, VERSION, extend, isDeferred, stringify, stringifyCache, stringifyCallback, toString,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  VERSION = '0.5.0';

  NOT_FOUND = {};

  NOT_FOUND_FINAL = {};

  NO_PROVIDER = {};

  isDeferred = function(o) {
    return typeof (o != null ? o.promise : void 0) === 'function';
  };

  extend = function(dest, src) {
    var key, value, _results;
    _results = [];
    for (key in src) {
      if (!__hasProp.call(src, key)) continue;
      value = src[key];
      _results.push(dest[key] = value);
    }
    return _results;
  };

  stringifyCache = null;

  stringifyCallback = function(key, value) {
    if (typeof value === "object" && value !== null) {
      if (stringifyCache.indexOf(value) >= 0) {
        return;
      }
      stringifyCache.push(value);
    }
    return value;
  };

  stringify = function(o) {
    var result;
    stringifyCache = [];
    result = JSON.stringify(o, stringifyCallback);
    stringifyCache = null;
    return result;
  };

  toString = function() {
    var obj, result;
    obj = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = stringify(obj);
    return result.replace(/"/g, "'").substring(1, result.length - 1);
  };

  InUse = {
    process: function() {
      var args, options, _ref;
      options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = this.market).log.apply(_ref, ["InUse.process", options].concat(__slice.call(args)));
      try {
        this.in_use_keys.push(options.key);
        return this.process_.apply(this, [options].concat(__slice.call(args)));
      } finally {
        this.in_use_keys.splice(this.in_use_keys.indexOf(options.key), 1);
      }
    },
    processing: function(key) {
      return this.in_use_keys.indexOf(key) >= 0;
    }
  };

  Registry = (function() {
    function Registry(market) {
      this.market = market;
      this.storage = [];
    }

    Registry.prototype.clear = function() {
      return this.storage = [];
    };

    Registry.prototype.add = function(key, provider) {
      var child_registry, last;
      last = this.storage.length > 0 ? this.storage[this.storage.length - 1] : void 0;
      if (last instanceof HashRegistry && typeof key === 'string' && !last.accept(key)) {
        last[key] = provider;
      } else {
        if (typeof key === 'string') {
          child_registry = new HashRegistry(this.market);
          child_registry[key] = provider;
        } else {
          child_registry = new FuzzyRegistry(this.market, key, provider);
        }
        this.storage.push(child_registry);
      }
      return provider;
    };

    Registry.prototype.removeProvider = function(provider) {
      var i, item, _i, _len, _ref, _results;
      _ref = this.storage;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (item instanceof HashRegistry) {
          item.removeProvider(provider);
          if (item.isEmpty) {
            _results.push(this.storage.splice(i, 1));
          } else {
            _results.push(void 0);
          }
        } else if (item.provider === provider) {
          _results.push(this.storage.splice(i, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Registry.prototype.accept = function(key) {
      var item, _i, _len, _ref;
      _ref = this.storage;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.accept(key)) {
          return true;
        }
      }
    };

    Registry.prototype.process = function() {
      var args, i, item, options, processed, result, value, _i, _j, _len, _ref, _ref1, _ref2;
      options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = this.market).log.apply(_ref, ["Registry.process", options].concat(__slice.call(args)));
      if (this.storage.length === 0) {
        return NO_PROVIDER;
      }
      if (options.all) {
        result = [];
        processed = false;
        _ref1 = this.storage;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          if (!item.accept(options.key)) {
            continue;
          }
          if (item.processing(options.key)) {
            continue;
          }
          processed = true;
          value = item.process.apply(item, [options].concat(__slice.call(args)));
          if (value !== NOT_FOUND) {
            result.push(value);
          }
        }
        if (processed) {
          return result;
        } else {
          return NO_PROVIDER;
        }
      } else {
        processed = false;
        for (i = _j = _ref2 = this.storage.length - 1; _ref2 <= 0 ? _j <= 0 : _j >= 0; i = _ref2 <= 0 ? ++_j : --_j) {
          item = this.storage[i];
          if (!item.accept(options.key)) {
            continue;
          }
          if (item.processing(options.key)) {
            continue;
          }
          processed = true;
          result = item.process.apply(item, [options].concat(__slice.call(args)));
          if (result === NOT_FOUND_FINAL) {
            break;
          } else if (result !== NOT_FOUND) {
            return result;
          }
        }
        if (processed) {
          return NOT_FOUND;
        } else {
          return NO_PROVIDER;
        }
      }
    };

    return Registry;

  })();

  HashRegistry = (function() {
    extend(HashRegistry.prototype, InUse);

    function HashRegistry(market) {
      this.market = market;
      this.in_use_keys = [];
    }

    HashRegistry.prototype.accept = function(key) {
      return this[key];
    };

    HashRegistry.prototype.isEmpty = function() {
      var key;
      for (key in this) {
        if (!__hasProp.call(this, key)) continue;
        if (key !== 'in_use_keys') {
          return false;
        }
      }
      return true;
    };

    HashRegistry.prototype.removeProvider = function(provider) {
      var key, value, _results;
      _results = [];
      for (key in this) {
        if (!__hasProp.call(this, key)) continue;
        value = this[key];
        if (value === provider) {
          _results.push(delete this[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    HashRegistry.prototype.process_ = function() {
      var args, options, provider, _ref;
      options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = this.market).log.apply(_ref, ["HashRegistry.process_", options].concat(__slice.call(args)));
      provider = this[options.key];
      if (!provider) {
        return NO_PROVIDER;
      }
      try {
        options.provider = provider;
        return provider.process.apply(provider, [options].concat(__slice.call(args)));
      } finally {
        delete options.provider;
      }
    };

    return HashRegistry;

  })();

  FuzzyRegistry = (function() {
    extend(FuzzyRegistry.prototype, InUse);

    function FuzzyRegistry(market, fuzzy_key, provider) {
      this.market = market;
      this.fuzzy_key = fuzzy_key;
      this.provider = provider;
      this.in_use_keys = [];
    }

    FuzzyRegistry.prototype.accept = function(key) {
      var item, _i, _len, _ref;
      this.market.log("FuzzyRegistry.accept", key);
      if (this.fuzzy_key instanceof RegExp) {
        return key.match(this.fuzzy_key);
      } else if (Object.prototype.toString.call(this.fuzzy_key) === '[object Array]') {
        _ref = this.fuzzy_key;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (item instanceof String) {
            if (item === key) {
              return true;
            }
          } else {
            if (key.match(item)) {
              return true;
            }
          }
        }
      }
    };

    FuzzyRegistry.prototype.process_ = function() {
      var args, options, _ref, _ref1;
      options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      (_ref = this.market).log.apply(_ref, ["FuzzyRegistry.process_", options].concat(__slice.call(args)));
      if (!this.accept(options.key)) {
        return NO_PROVIDER;
      }
      try {
        options.provider = this.provider;
        return (_ref1 = this.provider).process.apply(_ref1, [options].concat(__slice.call(args)));
      } finally {
        delete options.provider;
      }
    };

    return FuzzyRegistry;

  })();

  Provider = (function() {
    function Provider(market, options, value) {
      this.market = market;
      this.options = options;
      this.value = value;
      this.market.log("Provider.constructor", this.options, this.value);
    }

    Provider.prototype.process = function() {
      var args, options, result, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      (_ref = this.market).log.apply(_ref, ["Provider.process"].concat(__slice.call(args)));
      result = this.options.value ? this.value : typeof this.value === 'function' ? this.value.apply(this, args) : this.value;
      options = args[0];
      if (options != null ? options.async : void 0) {
        if (isDeferred(result)) {
          return result;
        } else {
          return new Deferred().resolve(result);
        }
      } else {
        return result;
      }
    };

    Provider.prototype.deregister = function() {
      return this.market.deregister(this);
    };

    return Provider;

  })();

  FreeMartInternal = (function() {
    var createDeferredRequest;

    function FreeMartInternal(name) {
      this.name = name;
      this.name || (this.name = 'Black Market');
      this.queues = {};
      this.registry = new Registry(this);
      this.disableLog();
    }

    FreeMartInternal.prototype.createProvider = function(options, value) {
      var value_;
      value_ = value;
      if (options.async) {
        value_ = function() {
          var args, result;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          result = new Deferred();
          if (typeof value === 'function') {
            options = args[0];
            options.deferred = result;
            value.apply(null, args);
          } else {
            result.resolve(value);
          }
          return result;
        };
      }
      return new Provider(this, options, value_);
    };

    FreeMartInternal.prototype.register = function(key, options, value) {
      var func, provider, request, result, _i, _len, _ref, _ref1;
      this.log('register', key, options, value);
      if (arguments.length === 1) {
        options = {};
      } else if (arguments.length === 2) {
        value = options;
        options = {};
      }
      provider = this.createProvider(options, value);
      this.registry.add(key, provider);
      if (this.queues[key]) {
        _ref = this.queues[key];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          request = _ref[_i];
          this.log.apply(this, ['register - deferred request', key].concat(__slice.call(request.args)));
          result = (_ref1 = this.registry).process.apply(_ref1, [{
            key: key,
            async: true
          }].concat(__slice.call(request.args)));
          this.log('register - deferred request result', result);
          if (result === NOT_FOUND) {
            throw "NOT FOUND: " + key;
          } else if (isDeferred(result)) {
            func = function(req) {
              return result.then(function() {
                var v;
                v = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return req.resolve.apply(req, v);
              }, function() {
                var v;
                v = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return req.reject.apply(req, v);
              });
            };
            func(request);
          } else {
            request.resolve(result);
          }
        }
        delete this.queues[key];
      }
      return provider;
    };

    FreeMartInternal.prototype.value = function(key, value) {
      this.log('value', key, value);
      return this.register(key, {
        value: true
      }, value);
    };

    FreeMartInternal.prototype.registerAsync = function(key, value) {
      this.log('registerAsync', key, value);
      return this.register(key, {
        async: true
      }, value);
    };

    FreeMartInternal.prototype.deregister = function(provider) {
      this.log('deregister', provider);
      return this.registry.removeProvider(provider);
    };

    FreeMartInternal.prototype.request = function() {
      var args, key, result, _ref;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.log.apply(this, ['request', key].concat(__slice.call(args)));
      result = (_ref = this.registry).process.apply(_ref, [{
        key: key
      }].concat(__slice.call(args)));
      if (result === NO_PROVIDER) {
        throw "NO PROVIDER: " + key;
      } else if (result === NOT_FOUND) {
        throw "NOT FOUND: " + key;
      } else {
        return result;
      }
    };

    createDeferredRequest = function() {
      var args, key, request;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      request = new Deferred();
      request.key = key;
      request.args = args;
      return request;
    };

    FreeMartInternal.prototype.requestAsync = function() {
      var args, key, request, result, _base, _ref;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.log.apply(this, ['requestAsync', key].concat(__slice.call(args)));
      result = (_ref = this.registry).process.apply(_ref, [{
        key: key,
        async: true
      }].concat(__slice.call(args)));
      if (result === NO_PROVIDER) {
        request = createDeferredRequest.apply(null, [key].concat(__slice.call(args)));
        (_base = this.queues)[key] || (_base[key] = []);
        this.queues[key].push(request);
        return request;
      } else if (result === NOT_FOUND) {
        throw "NOT FOUND: " + key;
      } else {
        return result;
      }
    };

    FreeMartInternal.prototype.requestMulti = function() {
      var keyAndArg, keyAndArgs, _i, _len, _results;
      keyAndArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.log.apply(this, ['requestMulti'].concat(__slice.call(keyAndArgs)));
      _results = [];
      for (_i = 0, _len = keyAndArgs.length; _i < _len; _i++) {
        keyAndArg = keyAndArgs[_i];
        if (Object.prototype.toString.call(keyAndArg) === '[object Array]') {
          _results.push(this.request.apply(this, keyAndArg));
        } else {
          _results.push(this.request(keyAndArg));
        }
      }
      return _results;
    };

    FreeMartInternal.prototype.requestMultiAsync = function() {
      var keyAndArg, keyAndArgs, requests;
      keyAndArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.log.apply(this, ['requestMultiAsync'].concat(__slice.call(keyAndArgs)));
      requests = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keyAndArgs.length; _i < _len; _i++) {
          keyAndArg = keyAndArgs[_i];
          if (typeof keyAndArg === 'object' && keyAndArg.length) {
            _results.push(this.requestAsync.apply(this, keyAndArg));
          } else {
            _results.push(this.requestAsync(keyAndArg));
          }
        }
        return _results;
      }).call(this);
      return Deferred.when.apply(Deferred, requests);
    };

    FreeMartInternal.prototype.requestAll = function() {
      var args, key, _ref;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.log.apply(this, ['requestAll', key].concat(__slice.call(args)));
      return (_ref = this.registry).process.apply(_ref, [{
        key: key,
        all: true
      }].concat(__slice.call(args)));
    };

    FreeMartInternal.prototype.requestAllAsync = function() {
      var args, key, requests, result, _ref;
      key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.log.apply(this, ['requestAllAsync', key].concat(__slice.call(args)));
      result = new Deferred();
      requests = (_ref = this.registry).process.apply(_ref, [{
        key: key,
        all: true,
        async: true
      }].concat(__slice.call(args)));
      Deferred.when.apply(Deferred, requests).then(function() {
        var results;
        results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return result.resolve(results);
      }, function() {
        var results;
        results = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return result.reject(results);
      });
      return result;
    };

    FreeMartInternal.prototype.clear = function() {
      return this.registry.clear();
    };

    FreeMartInternal.prototype.log = function() {
      var args, operation;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      operation = args.shift();
      return console.log("" + this.name + " - " + operation + ": " + (toString.apply(null, args)));
    };

    FreeMartInternal.prototype.disableLog = function() {
      if (!this.log_) {
        this.log_ = this.log;
        return this.log = function() {};
      }
    };

    FreeMartInternal.prototype.enableLog = function() {
      if (this.log_) {
        this.log = this.log_;
        return delete this.log_;
      }
    };

    FreeMartInternal.prototype.NOT_FOUND = NOT_FOUND;

    FreeMartInternal.prototype.NOT_FOUND_FINAL = NOT_FOUND_FINAL;

    FreeMartInternal.prototype.VERSION = VERSION;

    return FreeMartInternal;

  })();

  FreeMartInternal.prototype.req = FreeMartInternal.prototype.request;

  FreeMartInternal.prototype.reqAsync = FreeMartInternal.prototype.requestAsync;

  FreeMartInternal.prototype.reqMulti = FreeMartInternal.prototype.requestMulti;

  FreeMartInternal.prototype.reqMultiAsync = FreeMartInternal.prototype.requestMultiAsync;

  FreeMartInternal.prototype.reqAll = FreeMartInternal.prototype.requestAll;

  FreeMartInternal.prototype.reqAllAsync = FreeMartInternal.prototype.requestAllAsync;

  this.FreeMart = new FreeMartInternal('Free Mart');

  this.FreeMart.create = function(name) {
    return new FreeMartInternal(name);
  };

}).call(this);
